fileTypes: [
  "def"
  "mod"
]
name: "Modula-2"
patterns: [
  {
    match: "\\b(AND|ARRAY|BEGIN|BY|CASE|CONST|DEFINITION|DIV|DO|ELSE|ELSIF|END|EXIT|EXPORT|FOR|FORWARD|FROM|IF|IMPLEMENTATION|IMPORT|IN|LOOP|MODULE|MOD|NOT|OF|OR|POINTER|PROCEDURE|QUALIFIED|RECORD|REPEAT|RETURN|SET|THEN|TO|TYPE|UNTIL|VAR|WHILE|WITH)\\b"
    name: "keyword.other.modula-2"
  }
  {
    match: "\\b(ABS|ADDRESS|BITSET|BOOLEAN|CAP|CARDINAL|CHAR|CHR|DEC|EXCL|FLOAT|HALT|HIGH|INC|INCL|INTEGER|LONGINT|LONGREAL|MAX|MIN|ODD|ORD|PROC|REAL|SIZE|TRUNC|VAL)\\b"
    name: "storage.type.modula-2"
  }
  {
    match: "\\b(FALSE|NIL|TRUE)\\b"
    name: "constant.language.modula-2"
  }
  {
    match: "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b"
    name: "constant.numeric.modula-2"
  }
  {
    begin: "'"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.modula-2"
    end: "'"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.modula-2"
    name: "string.quoted.single.modula-2"
  }
  {
    begin: "\""
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.modula-2"
    end: "\""
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.modula-2"
    name: "string.quoted.double.modula-2"
  }
  {
    begin: "\\(\\*"
    captures:
      "0":
        name: "punctuation.definition.comment.modula-2"
    end: "\\*\\)"
    name: "comment.block.modula-2"
  }
]
scopeName: "source.modula-2"
